%%
% Нужно создать функцию индикатор следующей области:
%   * область состоит из столбцов различной высоты
%   * высота столбцов определяется из бинарного представления номера студента (%номергруппы%%номер_студента%)
%     если значение бита 1, то строим высокий столбец, если 0, то строим никий столбец.
%   * положение на плоскости произвольно
%   * все размеры произвольны



%%
%   stud_num  - номер студента
%   bar_sizes - монотонно возрастающий вектор содержащий ширину каждого столбца, при этом
%               [0.1, 0.2, 0.3, 0.4 ]
%               значит, что первый столбец начинается в 0 и заканчивается в 0.1,
%               второй начинается 0.1 и заканчивается в 0.2
%               и т.д.
%    bar_hi -   высота высокого столбца
%    bar_lo -   высота низкого столбца
%    x      -   координата по x в которой начинается область
%    y      -   координата по y в которой начинается область

function [ area ] = area(stud_num, bar_sizes, bar_hi, bar_lo, x, y)

    % Очевидно, что столбцов будет  ceil(log2(stud_num))
    bitcount = ceil(log2(stud_num));

    % Каждое число означает конец столбца по х, считая что область находится в (0, 0)
    bar_sizes = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9];

    % Высота высокго столбца
    bar_hi = 1;

    % Высота низкого столбца
    bar_lo = 0.3;

    % Биты, соотвествующие нашему номеру
    bits = [];
    num = stud_num;
    while num ~= 0
        bits = [mod(num, 2), bits(1:length(bits))];
        num = floor(num / 2);
    end

    % Дополним недостающими нулями
    bits = [ zeros([ 1, bitcount - length(bits) ]), bits(1:length(bits)) ];

    % Высоты
    heights = zeros([1, bitcount]);
    for i = 1:BITCOUNT
        % Ну понятно: если bits[i] == 1 => 1 * bar_hi + (1 - 1) * bar_lo, иначе 0 * bar_hi + (1 - 0) * bar_lo
        heights(i) = bits(i) * bar_hi + (1 - bits(i)) * bar_lo;
    end

    function [ a ] = area_f(u, v)
        % Смещаем область в 0, 0
        u = u - x;
        v = v - y;


        j = 1;
        while(u < bar_sizes(j))
            j = j + 1;
        end

        a = ( v < heights(j - 1) );
    end

    area = @area_f;
end
